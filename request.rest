POST http://localhost:5000/api/blog/create
Content-Type: application/json

{
    "blogTitle" : "web performance: the problems",
    "blogContent": " <p>              We've learnt already in the first part of this web performance              series why performance is important and should be budgeted for at              every stage of product development, what benefits it holds for              businesses and products, and the negatives of poor performance.              Now, let's talk about the problems of web performance; what makes              sites slow.            </p>            <div className='heading-paragraph'>              <h2>What makes sites slow?</h2>              <p>                No doubt, there's a ton of reasons why websites are slow, some                of which are case-specific. I like to look at these factors from                two perspectives:              </p>              <ul>                <li>the user experience</li>                <li>the developer perspective</li>              </ul>              <p>                Really, the user and the developer are the two main parties                involved in this discussion; all other factors that impact web                performance like the network from which the site is accessed,                the hardware specs of the device, and the software fall under                the user factor. Same way, developers are responsible for                whatever impacts performance on the tech part of it. So,                basically, these two guys are the players in this game.              </p>              <br />              <p>                That being said, in this article, we'll look at things less from                user perspective, and focus on the development side because most                of the problems come from there, and to move forward, developers                have to build with the users in mind and the various real-life                situations they could be caught up in because we definitely                can't control them; we can't move all our users to a luxury                place with super-fast internet connection and great devices —                that's unrealistic. So, let's jump right into what makes sites                on the internet slow today.              </p>              <br />              <p>                Apart from network, hardware, and software limitations which are                user factors, let's actually talk about the technical causes of                poor performance on the front end.              </p>            </div>            <div className='heading-paragraph'>              <h2>1. Third-party resources and scripts</h2>              <p>                It's an absolutely normal and almost inevitable practice to have                third-party resources and scripts on our sites because we most                of the time consume third-party content and services whether                it's analytics, ads, social media plugins, framework/library                resources, we use them.              </p>              <br />              <p>                However, so many times, the authors of these third-party                resources just tell us to plug in their resources to our sites:                resources that might depend on other resources all the way down                or might be poorly developed, and then they serve us. The fact,                however, remains that most of these assets are the leading cause                of performance problems on the web because of course, we didn't                build them, we don't know how they were built, we do not own                them, all we want is their services and we can't determine the                quality of these services, we can only assess them and act based                on the information.              </p>              <br />              <p>                It's sad news that third-party resources today have taken over                control of tons of sites that they start to have unintended                (sometimes malicious) side effects, and as developers, most of                the time we're just lazy to take it back. It's very common to                see sites include a huge third-party resource, and then end up                using a very minimal portion of it, say 5% e.g including a 20kb                library only to end up using a component that's barely worth a                kilobyte. That's usually not a great idea as most of these                things can easily be implemented in-house with just a little bit                extra work.              </p>            </div>            <div className='heading-paragraph'>              <h2>2. Heavy assets and resources</h2>              <p>                We all have that one big file on our sites – the one big                JavaScript asset or the pretty 1MB image from Unsplash.                JavaScript is on top of the list of frontend resources that                impact performance negatively, followed by images and really,                it's difficult to keep track of these things when everyone is in                a rush and hell-bent on results so we under-prioritize or forget                about optmizing for performance, something that affects our                users directly. Users know when your site is slow, they also                know most times what sites consume a lot of their mobile data.              </p>              <br />              <p>                Engineers write code and craft experiences they find pleasing                which more often than not is at the expense of the user —                forgetting what the user needs and what they perceive to be a                great experience. The user has no idea how fancy your code is or                what shiny new tech you're using, they just want to be able to                use your product and have a great experience doing that. And so,                if your site is not accessible quickly, you do not even get the                chance to show anything to the user.              </p>            </div>            <div className='heading-paragraph'>              <h2>3. Excessive HTTP Requests</h2>              <p>                Get! Post! Frontend developers, we love to do that a lot:                consuming APIs and all — it's fun actually, being able to                communicate with a web server, that's pretty incredible, right?              </p>              <br />              <p>                Well, yes, it is but sure comes at a cost. Sending requests back                and forth can quickly become overwhelming for a web server to                handle. Imagine for a moment that you're going to get a snack                one day at the office and then, a superior calls and says “hey,                on your way, please get me some venti iced skinny hazelnut                macchiato, sugar-free syrup, extra shot, light ice, no whip                coffee”. Extremely confusing, yeah?              </p>              <br />              <p>                Similar can happen with your server when making requests. If you                observe from that order, the entire purpose and what matters to                you the most is getting your snack, just the way your users want                to use your product — they want to satisfy themselves. Too bad                their superior (engineers in this case) took that privilege away                from them. You know how tough it can be to say no to that – same                way the server can't say no to your multiple requests. It just                must (or at least attempt to) process the requests regardless of                how complicated it is.              </p>              <br />              <p>                Your user might not need all the junks and stuff you're fetching                for them on the initial load, they need what matters, and you're                in place to answer those questions. Identify the things you'd                want to have on your screen quickly if you were the user.              </p>            </div>            <div className='heading-paragraph'>              <h2>4. Inadequate server resources</h2>              <p>                One critical factor often overlooked is the capabilities of the                web server behind a frontend. Nearly all articles and                discussions about performance are usually focused on the                frontend. Now, while that isn't wrong as most of the work is                usually on the frontend, the server that powers a frontend can                also greatly affect overall performance.              </p>              <br />              <p>                I mean, sure, you could have a pretty fast frontend but if your                server fails to respond on time, the frontend never even makes                it. So, what do I mean? Some servers have very high                <a href='https://web-dev/time-to-first-byte' target='blank'> TTFB</a> (Time to                First Byte) which is the time it takes for the client get the                first byte of response data from a server after an HTTP request,                and so if that server's hardware (CPU, RAM etc) is inferior or                insufficient and it takes long (more than 600ms on an average                network) to get a response for just the main document request,                that's a prolonged page load and so your user just stares at a                blank screen for seconds with no sign of progress which can be                really frustrating. Now, even when we get a response for that                main document request, subsequent resources like scripts, css                and images (all of which point to the server) still have to get                their first byte of response data and fully download which can                really slow things down.              </p>            </div>            <div className='heading-paragraph'>              <h2>Conclusion</h2>              <p>                Now that you have a clearer view on why performance matters and                the several factors that influence performance, including a few                instances of not-so-good practices, in the final part of this                series, we'll talk about known and tested strategies to tackle                these problems.              </p>              <br />              <p>                In summary, how we build what we build matters because that's a                huge part of the product no matter what it's later transformed                to. That's what we serve users, and so priority should be given                to what matters to the user, and not how quickly we can achieve                something that might not be the best experience for users.              </p>            </div>            <div className='heading-paragraph-list'>              <h2>Further Reading and Resources…</h2>              <ul>                <li>                  <a                    href='https://csswizardry.com/2018/11/css-and-network-performance/'                    target='blank'                  >                    CSS and Network Performance                  </a>                  <span> by Harry Roberts</span>                </li>                <li>                  <a                    href='https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4'                    target='blank'                  >                    The Cost of JavaScript                  </a>                  <span> in 2018 by Addy Osmani</span>                </li>                <li>                  <a                    href='https://developers.google.com/web/fundamentals/performance/speed-tools/'                    target='blank'                  >                    How To think About Speed Tools                  </a>                  <span> on the Google Developers Blog</span>                </li>                <li>                  <a                    href='https://www.youtube.com/watch?v=4bZvq3nodf4'                    target='blank'                  >                    Progressive Performance                  </a>                  <span> by Alex Russell</span>                </li>              </ul>            </div>",
    "blogSummerise": "We've learnt already in the first part of this web performance series why performance is important and should be budgeted for at every stage of product development, what benefits it holds for businesses and products, and the negatives of poor performance. Now, let's talk about the problems of web performance; what makes sites slow"
}

###
GET http://localhost:5000/api/blog/all

###
POST http://localhost:5000/api/blog/create
Content-Type: application/json

{
    "blogTitle" : "web performance: the big picture",
    "blogContent": "<p>As the web platform continues to evolve very quickly, new technologies and development techniques spring up even more rapidly. It has become alarming how many slow sites are on the web today, one of the reasons being the drastic shift of the web from a document-centric platform to a much more dynamic application platform - the web is more powerful than ever, making it possible for users to get virtually any experience on the web - and that's awesome, really.</p><br/> <p>However, the web really is getting <i>slower</i>. It's quite unfortunate that a lot of web teams and buisnesses just want a 'magical solution' not realizing there's no one antidote to poor performance of sites; there's no one tech or approach that's going to make websites or the web platform as a whole fast automagically, which is why in my opinion, engineering teams should prioritize performance at every phase of the <a href='https://en.wikipedia.org/wiki/Design_sprint' target='blank' >design sprint</a> for a product.</p><br/> <p>In this article, we'll be talking about why web performance really matters. So let's dive right in!</p> <div className='heading-paragraph'> <h2>Why Performance Matters</h2> <p>In one word, performance is about <b>users</b>. That's why performance matters. You're building a product for people to use it, right? Whether you're building your portfolio, a news site, or a more dynamic experience like Facebook, you want people to use your stuff; and users in a lot of cases means success, same way, success means profit if it's a business!</p><br/> <p>However, for people to interact seamlessly with your application or website, it has to be accessible. Note that 'accessible' here is more about showing content to your users quickly at least, and if possible, making the most basic feature work. Diving deeper, optimizing performance for users mean providing a great <b>user experience</b> overall. Let's see how doing this is of benefit to our buisnesses and products.</p> </div> <div className='heading-paragraph'> <h2>Web Performance meets User Experience</h2> <p>Now that we know a little about why performance matters, let's talk more about how great performance and poor performance impact user experience.</p><br/> <p>Great performance means great user experience; great user experience translates to reataining users, and that means more users! You want people to go to your site and do whatever the site was made for. If it's an e-commerce site, you want people to go there, sign up, and buy or sell stuff. If it's a buisness, you want users to use your product, talk about it, share it, bring more users, and get more revenue. Performance plays a great role in this because:</p><br/> <p>If your site is slow to load or make the most basic feature possible to use, your users get tired of waiting and discouraged. Nobody wants to spend the whole day waiting for your site or app to load to be able to perform a task, because remember, it's the world wibe web: for the most part, there are alternatives to your product, you have competitors. So, once a user thinks your platform would to take too much of their time, they want to leave and go to another site that offers close to or exactly what your site offers.</p><br/> <p>Also, in rare cases where there's no alternative to your product, the users either get frustrated up to the level they want to quit your platform totally, or they just leave your site and go somewhere else, and that can be bad for buisness.</p><br/> <p>Again, <b>poor performance means more cost for the users -</b> Yes, cost. We know the web is becoming a <a href='https://gs.statcounter.com/platform-market-share/desktop-mobile-tablet' target='blank'>mobile-dominant platform</a>. Mobile means movable - the users can take the web with them wherever they go and as such, they can't determine network conditions or expect to get a certain network quality in such situations. So, your user might have no choice other than to access your site on a 2G network. If your site is not optimized for such conditions, the user becomes increasingly tired of trying to acess it because of the time spent and the cost of trying subsequently over such conditions. Note that 'cost' also includes real cost for data plans.</p><br/> <i>On the contrary...</i><br/><br/> <p>Great performance can be percieved as a site that delivers what matters quickly: the user gets to your site, for example, a social networking app optimized for poor network and hardware conditions - which of course requires deliberate commitment by the engineering and product team as a whole at every process. Imagine your user can view at least 10% of <b>relevant</b> (useful-to-user content) on your app (maybe text posts from frineds without images), or the user gets a very minimal version of your site on a poor network, take <a href='https://m.facebook.com' target='blank' >m.facebook.com</a> for example. That's an awesome experience because even if the user is engaged with 10% of your platform, it's much better than losing the user totally, which is less than, or sometimes 0%. This way, the user can interact with your app, and of course, instills in the mind of your users that site is always a go-to no matter the network condition. That makes better user experience and more profit for the buisness.</p><br/> <p>Let's take a look quickly at some case-studies on how performance has either impacted positively or negatively in conversion rates and revenue on products.</p> </div> <div className='heading-paragraph'> <h2>Concluson</h2> <p>Hopefully, you have a better take on web performance, why your team should consider it at every process of product design, and the benefits it holds for your business and product. You've also seen from the case studies where poor performance has let to losing users and less revenue. Stay tuned for the next articles where I talk about the several factors affecting performance, including strategies and patterns to tackle these problems</p> </div> <div className='heading-paragraph-list'> <h2>Further Reading and Resources...</h2> <ul> <li><a href='https://building.calibreapp.com/beyond-the-bubble-real-world-performance-9c991dcd5342'>Beyond the Bubble: Real world performance</a> by Ben Schwarz</li> <li><a href='https://youtube.com/watch?v=VpixmppRbZU' target='blank'>The New Mobile Reality</a> by Alex Russell</li> <li><a href='https://meduim.com/dev-channel/a-netflix-web-performance-case-study-cObcde26a9d9' target='blank'>A Netflix Web Performance Case Study</a> by Addy Osmani</li> </ul> </div>",
    "blogSummerise": "As the web platform continues to evolve very quickly, new technologies spring up even more rapidly. It has become alarming how many slow sites are on the web today, one of the reasons being the drastic shift of the web from a document-centric platorm to a much more dynamic application platfrom - the web is more powerful than ever, making it possible than ever, making it possible for users to get virtually any experience on the web - and that's awesome, really"
}

###
GET http://localhost:5000/api/blog/all

###
DELETE  http://localhost:5000/api/blog/63048510e2e3303cd872342b